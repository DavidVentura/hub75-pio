;
; Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
;
; SPDX-License-Identifier: BSD-3-Clause
;

.program hub75_row

; side-set pin 0 is LATCH
; side-set pin 1 is OEn
; OUT pins are row select A-E
;
; Each FIFO record consists of:
; - 5-bit row select (LSBs)
; - Pulse width - 1 (27 MSBs)
;
; Repeatedly select a row, pulse LATCH, and generate a pulse of a certain
; width on OEn.

.side_set 2

.wrap_target
    out pins, 5 [7]    side 0x2 ; latch=0; oe=1
    out x, 27   [7]    side 0x3 ; latch=1; oe=1
pulse_loop:
    jmp x-- pulse_loop side 0x0 ; latch=0; oe=0
.wrap

% c-sdk {
static inline void hub75_row_program_init(PIO pio, uint sm, uint offset, uint row_base_pin, uint n_row_pins, uint latch_base_pin) {
    pio_sm_set_consecutive_pindirs(pio, sm, row_base_pin, n_row_pins, true);
    pio_sm_set_consecutive_pindirs(pio, sm, latch_base_pin, 2, true);
    for (uint i = row_base_pin; i < row_base_pin + n_row_pins; ++i)
        pio_gpio_init(pio, i);
    pio_gpio_init(pio, latch_base_pin);
    pio_gpio_init(pio, latch_base_pin + 1);

    pio_sm_config c = hub75_row_program_get_default_config(offset);
    sm_config_set_out_pins(&c, row_base_pin, n_row_pins);
    sm_config_set_sideset_pins(&c, latch_base_pin);
    sm_config_set_out_shift(&c, true, true, 32);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

static inline void hub75_wait_tx_stall(PIO pio, uint sm) {
    uint32_t txstall_mask = 1u << (PIO_FDEBUG_TXSTALL_LSB + sm);
    pio->fdebug = txstall_mask;
    while (!(pio->fdebug & txstall_mask))
        tight_loop_contents();
}
%}

.program hub75_data_rgb888
.side_set 1

; Each FIFO record consists of 4 RGBRGB values; these are already bit-planed

public entry_point:
.wrap_target
public shift0:
    ; the 4 clock delay prevents some wacky shifting of the last row
    pull block       [4] side 0 ; 32 bits into OSR

    in osr, 6        [0] side 0 ; 6 lowest OSR bits into ISR
    out null, 6      [0] side 0 ; shift 6 zeroes into OSR
    mov pins, isr    [1] side 1 ; col 0 & clock posedge

    in osr, 6        [0] side 0 ;
    out null, 6      [0] side 0 ; shift 6 zeroes into OSR
    mov pins, isr    [1] side 1 ; col 1 & clock posedge

    in osr, 6        [0] side 0 ;
    out null, 6      [0] side 0 ; shift 6 zeroes into OSR
    mov pins, isr    [1] side 1 ; col 2 & clock posedge

    in osr, 6        [0] side 0 ;
    out null, 6      [0] side 0 ; shift 6 zeroes into OSR
    mov pins, isr    [1] side 1 ; col 3 & clock posedge
.wrap

; Note that because the clock edge for pixel n is in the middle of pixel n +
; 1, a dummy pixel at the end is required to clock the last piece of genuine
; data. (Also 1 pixel of garbage is clocked out at the start, but this is
; harmless)

% c-sdk {
static inline void hub75_data_rgb888_program_init(PIO pio, uint sm, uint offset, uint rgb_base_pin, uint clock_pin) {
    pio_sm_set_consecutive_pindirs(pio, sm, rgb_base_pin, 6, true);
    pio_sm_set_consecutive_pindirs(pio, sm, clock_pin, 1, true);
    for (uint i = rgb_base_pin; i < rgb_base_pin + 6; ++i)
        pio_gpio_init(pio, i);
    pio_gpio_init(pio, clock_pin);

    pio_sm_config c = hub75_data_rgb888_program_get_default_config(offset);
    sm_config_set_out_pins(&c, rgb_base_pin, 6);
    sm_config_set_sideset_pins(&c, clock_pin);
    // OSR shifts right; when we do `out null, 6` the effect on OSR is `OSR = OSR >> 6`

    sm_config_set_out_shift(&c, true, false, 32);

    // ISR shift to left. every `in osr, 6` ends at `OSR = 0b.....dddddd` (d = data)
    sm_config_set_in_shift(&c, false, false, 32);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_exec(pio, sm, offset + hub75_data_rgb888_offset_entry_point);
    pio_sm_set_enabled(pio, sm, true);
}

%}
